import streamlit as st
import pandas as pd
import plotly.express as px
import yfinance as yf
from datetime import datetime
import gspread

# =================================================================================
# CONFIGURA√á√ÉO E CONEX√ÉO DE DADOS (VERS√ÉO FINAL)
# =================================================================================
st.set_page_config(page_title="Plataforma de An√°lise", layout="wide")
st.title("Plataforma Integrada de An√°lise de Ativos")

NOME_PLANILHA = "Plataforma_DB_Final"

@st.cache_data(ttl=3600) # Cache de 1 hora
def carregar_dados_gsheets(worksheet_name):
    """Fun√ß√£o para carregar dados de uma aba espec√≠fica usando gspread."""
    try:
        gc = gspread.service_account_from_dict(st.secrets["gcp_service_account"])
        spreadsheet = gc.open(NOME_PLANILHA)
        worksheet = spreadsheet.worksheet(worksheet_name)
        data = worksheet.get_all_records()
        return pd.DataFrame(data)
    except Exception as e:
        st.error(f"Erro ao carregar a aba '{worksheet_name}': {e}")
        return pd.DataFrame()

# Carrega todos os dados das abas corretas
df_empresas_master = carregar_dados_gsheets("empresas_master")
df_perfis = carregar_dados_gsheets("perfis_empresas")
df_metricas_anuais = carregar_dados_gsheets("metricas_anuais")
df_bonds = carregar_dados_gsheets("dados_bonds")

@st.cache_data(ttl=3600)
def get_price_history(ticker):
    """Busca hist√≥rico de pre√ßos do yfinance."""
    try:
        stock = yf.Ticker(ticker)
        return stock.history(period="1y")
    except Exception:
        return pd.DataFrame()

# =================================================================================
# BARRA LATERAL
# =================================================================================
st.sidebar.header("Sele√ß√£o de Ativo")

if not df_empresas_master.empty:
    dict_empresas = pd.Series(df_empresas_master.Nome_Empresa.values, index=df_empresas_master.Ticker).to_dict()
    ticker_selecionado = st.sidebar.selectbox("Selecione a Empresa:", options=list(dict_empresas.keys()), format_func=lambda x: f"{x} - {dict_empresas.get(x, 'N/A')}")
else:
    st.sidebar.error("A lista de empresas master n√£o p√¥de ser carregada.")
    ticker_selecionado = None
    st.stop()

# =================================================================================
# L√ìGICA PRINCIPAL
# =================================================================================
if ticker_selecionado:
    # --- FILTRAGEM DE DADOS ---
    info_empresa = df_empresas_master[df_empresas_master["Ticker"] == ticker_selecionado].iloc[0]
    perfil_empresa = df_perfis[df_perfis["Ticker"] == ticker_selecionado].iloc[0] if not df_perfis[df_perfis["Ticker"] == ticker_selecionado].empty else None
    metricas_empresa = df_metricas_anuais[df_metricas_anuais["Ticker"] == ticker_selecionado].sort_values(by="Ano", ascending=False)
    
    st.header(f"{info_empresa['Nome_Empresa']} ({info_empresa['Ticker']})")
    st.caption(f"Setor: {info_empresa['Setor_Manual']}")
    
    # Pega o √∫ltimo ano de m√©tricas dispon√≠veis
    ultimo_ano_df = metricas_empresa.iloc[0] if not metricas_empresa.empty else None

    # --- DEFINI√á√ÉO DAS ABAS ---
    tab1, tab2, tab3, tab4 = st.tabs(["üìä Resumo", "üìà An√°lise Financeira", "ÂÄ∫Âà∏ An√°lise de D√≠vida", "üë• Compar√°veis de Mercado"])

    # --- ABA 1: RESUMO ---
    with tab1:
        st.subheader("Descri√ß√£o da Companhia")
        if perfil_empresa is not None:
            st.write(perfil_empresa['Descricao_Longa'])
            st.write(f"**Website:** [{perfil_empresa['Website']}]({perfil_empresa['Website']})")
        
        st.subheader("Hist√≥rico de Pre√ßos (√öltimo Ano)")
        price_history = get_price_history(ticker_selecionado)
        if not price_history.empty:
            fig_preco = px.line(price_history, x=price_history.index, y="Close", title="Pre√ßo de Fechamento")
            st.plotly_chart(fig_preco, use_container_width=True)

    # --- ABA 2: AN√ÅLISE FINANCEIRA ---
    with tab2:
        if ultimo_ano_df is not None:
            st.subheader("Desempenho Financeiro Hist√≥rico")
            fig = px.bar(metricas_empresa, x="Ano", y=["Receita_Liquida", "EBIT", "Lucro_Liquido"], barmode='group', title="Performance Anual")
            st.plotly_chart(fig, use_container_width=True)

            st.subheader("Ratios de Rentabilidade e Efici√™ncia (√öltimo Ano)")
            roe = (ultimo_ano_df['Lucro_Liquido'] / ultimo_ano_df['Patrimonio_Liquido']) if ultimo_ano_df['Patrimonio_Liquido'] > 0 else 0
            margem_liquida = (ultimo_ano_df['Lucro_Liquido'] / ultimo_ano_df['Receita_Liquida']) if ultimo_ano_df['Receita_Liquida'] > 0 else 0
            
            col1, col2 = st.columns(2)
            col1.metric("ROE (Return on Equity)", f"{roe:.2%}")
            col2.metric("Margem L√≠quida", f"{margem_liquida:.2%}")
        else:
            st.warning("N√£o h√° dados financeiros anuais dispon√≠veis para esta empresa.")

    # --- ABA 3: AN√ÅLISE DE D√çVIDA ---
    with tab3:
        if ultimo_ano_df is not None:
             st.subheader("Perfil da D√≠vida")
             # A l√≥gica completa da Aba de D√≠vida pode ser inserida aqui, lendo de `df_bonds`
             st.info("Funcionalidade de an√°lise de bonds em desenvolvimento nesta nova arquitetura.")
        else:
            st.warning("N√£o h√° dados financeiros para analisar a d√≠vida.")
            
    # --- ABA 4: COMPAR√ÅVEIS DE MERCADO ---
    with tab4:
        st.subheader(f"An√°lise de Compar√°veis do Setor: {info_empresa['Setor_Manual']}")
        peers = df_empresas_master[df_empresas_master['Setor_Manual'] == info_empresa['Setor_Manual']]
        st.info("Funcionalidade de compar√°veis em desenvolvimento nesta nova arquitetura.")

else:
    st.info("Selecione uma empresa na barra lateral para come√ßar a an√°lise.")
